name: Signify CI - Test Runner

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  signify-ci:
    name: CI-Signify
    runs-on: ubuntu-latest

    env:
      app_name: SignifyDebug

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}
    steps:
      # Install Git LFS in CI
      - name: Install Git LFS
        run: git lfs install

      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: recursive
          fetch-depth: 0

      - name: Verify LFS Download
        run: |
          ls -lh app/src/main/assets/RFC_model_ir9_opset19.onnx
          du -sh app/src/main/assets/RFC_model_ir9_opset19.onnx

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Retrieve Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Assemble
        run: ./gradlew assembleDebug lint --parallel --build-cache

      - name: Run Unit Tests
        run: ./gradlew check --parallel --build-cache

      - name: Start Emulator and Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          avd-name: github
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x1920 -debug all
          disable-animations: true
          script: |
            adb wait-for-device
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            ./gradlew connectedDebugAndroidTest --info --build-cache

      - name: Capture Emulator Logs
        if: failure()
        run: |
          adb logcat -d > emulator_logs.txt
          cat emulator_logs.txt

      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport

      - name: Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info

      - name: Decode Keystore
        run: echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > ./keystore.jks

      - name: Build Signed APK
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=$KEYSTORE_PATH \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: release apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Verify APK Contents
        run: |
          unzip -l app/build/outputs/apk/release/app-release.apk | grep -E "RFC_model_ir9_opset19.onnx|hand_landmarker.task"

      - name: List Assets Directory Contents
        run: ls -la app/src/main/assets
